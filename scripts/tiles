#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.errors import PhotonsAppError
from photons_app.actions import an_action

from photons_messages import DeviceMessages, TileMessages
from photons_products import Products

from delfick_project.addons import addon_hook
import logging
import random

log = logging.getLogger("info")


@addon_hook(
    extras=[
        ("lifx.photons", "transport"),
        ("lifx.photons", "messages"),
        ("lifx.photons", "products"),
        ("lifx.photons", "device_finder"),
    ]
)
def __lifx__(collector, *args, **kwargs):
    pass


@an_action(needs_target=True, special_reference=True)
async def tiles(collector, target, reference, **kwargs):
    """
    Set any tiles we find on the network to specific colors

    You can specify only specific devices by giving a matcher. For example:

    ``tiles d073d5000001,d073d5000002``

    or

    ``tiles match:group_name=kitchen``
    """
    tiles = []
    async with target.session() as afr:
        async for pkt, _, _ in target.script(DeviceMessages.GetVersion()).run_with(reference, afr):
            if pkt | DeviceMessages.StateVersion:
                if Products[pkt.vendor, pkt.product].cap.has_matrix:
                    tiles.append(pkt.serial)

        if not tiles:
            raise PhotonsAppError("Couldn't find any tiles on your network")

        colors = []
        for i in range(5):
            nxt = []
            for i in range(64):
                nxt.append(
                    {
                        "hue": random.randint(0, 360),
                        "saturation": 1,
                        "brightness": 0.5,
                        "kelvin": 3500,
                    }
                )
            colors.append(nxt)

        msgs = [DeviceMessages.SetPower(level=65535)]

        for i, colors in enumerate(colors):
            msgs.append(
                TileMessages.Set64(
                    x=0,
                    y=0,
                    width=8,
                    length=1,
                    duration=2,
                    colors=colors,
                    tile_index=i,
                    res_required=False,
                )
            )

        await target.script(msgs).run_with_all(tiles, afr)


if __name__ == "__main__":
    from photons_app.executor import main
    import sys

    main(["lan:tiles"] + sys.argv[1:])
