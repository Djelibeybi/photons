#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.actions import an_action

from photons_control.planner import Gatherer, Skip, make_plans

from option_merge_addons import option_merge_addon_hook
import logging

log = logging.getLogger("info")

@option_merge_addon_hook(extras=[
      ("lifx.photons", "transport")
    , ("lifx.photons", "control")
    , ("lifx.photons", "device_finder")
    ])
def __lifx__(collector, *args, **kwargs):
    pass

@an_action(needs_target=True, special_reference=True)
async def info(collector, target, reference, **kwargs):
    def error(e):
        log.error(e)

    g = Gatherer(target)
    plans = make_plans("state", "address", "capability", "zones", "firmware")
    async for serial, complete, info in g.gather_per_serial(plans, reference, error_catcher=error, find_timeout=30):
        infos = []

        for key, val in sorted(info.items()):
            if val is Skip:
                continue

            if key == "capability":
                vl = {"name": val["cap"].name, "identifier": val["cap"].identifier, "specs": []}
                for k, v in val["cap"].items():
                    if k.startswith("has") and v:
                        vl["specs"].append(k[4:])
                if val["has_extended_multizone"]:
                    vl["specs"].append("extended_multizone")
                val = vl
            elif key == "zones":
                vl = []
                for zi, color in val:
                    vl.append(f"\t\tZone {zi}: {repr(color)}")
                val = "\n{}".format('\n'.join(vl))

            elif key == "power":
                val = val["level"]

            elif key == "state":
                infos.append(f"power: {val['power']}")
                infos.append(f"label: {val['label']}")
                infos.append(f"color: hue: {val['hue']}, saturation: {val['saturation']}, brightness: {val['brightness']}, kelvin: {val['kelvin']}")
                continue

            infos.append(f"{key}: {val}")

        info_string = "\n\t{0}".format("\n\t".join(infos))
        print(f"{serial}: {info_string}\n")

if __name__ == "__main__":
    from photons_app.executor import main
    import sys
    import os
    main(["lan:info"] + sys.argv[1:])
